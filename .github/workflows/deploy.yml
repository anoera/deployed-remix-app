name: 🚀 Deploy

on:
  push:
    branches:
      - master
      - dev
  pull_request:

permissions:
  actions: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 20

      - name: 📥 Install deps
        run: npm install

      - name: 🔬 Lint
        run: npm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: ⎔ Setup node
        uses: actions/setup-node@v4
        with:
          cache: npm
          cache-dependency-path: ./package.json
          node-version: 18

      - name: 📥 Install deps
        run: npm install

      - name: 🔎 Type check
        run: npm run typecheck --if-present

  build: 
    name: 🐳 build
    uses: ./.github/workflows/build.yml
    secrets: inherit

  deploy:
    name: 🚀 Deploy
    runs-on: [self-hosted]
    needs: [lint, typecheck, build]
    # only deploy master/dev branch on pushes
    if: ${{ (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') && github.event_name == 'push' }}

    # env:
    #   APP_ENV: ${{ secrets.APP_ENV }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4.1.1
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🚀 Run Docker Compose on Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        env: 
          APP_ENV: ${{ secrets.APP_ENV_STAGING }}
        run: 
          docker pull anoera/deployed-app:latest
          docker compose -f docker-compose.staging.yml up -d
          docker system prune --all --volumes --force

      - name: 🚀 Run Docker Compose on Production
        if: ${{ github.ref == 'refs/heads/main' }}
        env: 
          APP_ENV: ${{ secrets.APP_ENV }}
        run: 
          docker pull anoera/deployed-app:production
          docker compose -f docker-compose.yml up -d
          docker system prune --all --volumes --force

